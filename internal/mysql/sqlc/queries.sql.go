// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package sqlc

import (
	"context"
	"database/sql"
)

const countApiKey = `-- name: CountApiKey :one
SELECT COUNT(*) AS count FROM auth WHERE api_key = ?
`

func (q *Queries) CountApiKey(ctx context.Context, apiKey string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countApiKey, apiKey)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getProfile = `-- name: GetProfile :one
select id, username, first_name, last_name, city, school from user
      RIGHT JOIN user_profile up on user.id = up.user_id
      RIGHT JOIN user_data ud on user.id = ud.user_id
where username = ?
`

type GetProfileRow struct {
	ID        sql.NullInt64  `json:"id"`
	Username  sql.NullString `json:"username"`
	FirstName string         `json:"first_name"`
	LastName  string         `json:"last_name"`
	City      string         `json:"city"`
	School    string         `json:"school"`
}

func (q *Queries) GetProfile(ctx context.Context, username string) (GetProfileRow, error) {
	row := q.db.QueryRowContext(ctx, getProfile, username)
	var i GetProfileRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.City,
		&i.School,
	)
	return i, err
}

const getProfiles = `-- name: GetProfiles :many
select id, username, first_name, last_name, city, school from user
      RIGHT JOIN user_profile up on user.id = up.user_id
      RIGHT JOIN user_data ud on user.id = ud.user_id
`

type GetProfilesRow struct {
	ID        sql.NullInt64  `json:"id"`
	Username  sql.NullString `json:"username"`
	FirstName string         `json:"first_name"`
	LastName  string         `json:"last_name"`
	City      string         `json:"city"`
	School    string         `json:"school"`
}

func (q *Queries) GetProfiles(ctx context.Context) ([]GetProfilesRow, error) {
	rows, err := q.db.QueryContext(ctx, getProfiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProfilesRow
	for rows.Next() {
		var i GetProfilesRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.FirstName,
			&i.LastName,
			&i.City,
			&i.School,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
